<?xml version="1.0" encoding="UTF-8"?>
<!-- Komodo Project File - DO NOT EDIT -->
<project id="3a922322-c4d8-3f4c-b698-04ade07aa7f5" kpf_version="4" name="mano_browercms.kpf">
<macro async="1" id="4ed3b9bf-0a41-2243-bae7-0b46ab3cb372" idref="01eedc78-6fcd-a843-9b93-6d0f7b7ca528" keyboard_shortcut="" language="JavaScript" name="rails_init" rank="100" trigger="trigger_observer" trigger_enabled="1" trigger_observer_topic="project_added">
var project = (Components.classes["@activestate.com/koPartService;1"].getService().
                       runningMacro.project);
if (typeof(subject) == "undefined") subject = null;
else {
    if (subject != project) {
        //dump("This macro's project is "
        //     + project.name
        //     + " but we were triggered by "
        //     + ('name' in subject ? subject.name : ("subject: name unknown"))
        //     + "\n");
        return;
    }
    var suffix = "src/templates/raw/rails/Ruby on Rails.kpf";
    if (project.url.lastIndexOf(suffix) + suffix.length
        == project.url.length) {
        //dump("Loaded the template; leave\n");
        return;
    }
}
if (typeof(as_rails_macros) == "undefined"
    || (typeof(as_rails_macros.version) == "number"
        &amp;&amp; as_rails_macros.version &lt; 0.70)) { // update version # manually
    as_rails_macros = {  // make it global
        version : 0.70,
        
        CmdSequenceRunner : function(editor, cmds, end_note) {
            this.editor = editor;
            this.cmds = cmds;
            this.end_note = end_note;
            this.options = {};
        },
        
        validateVersion : function(appPath, appName) {
            // do a sanity check:
            var runSvc = Components.classes["@activestate.com/koRunService;1"].getService();
            var output = {};
            var error = {};                
            runSvc.RunAndCaptureOutput('"' + appPath + '" --version',
                                       '', '', '',
                                       output, error);
            var re = new RegExp(appName + '(?:\\.exe)?\\s+Ver[\\s\\d\.]+Distrib[\\s\\d\\.]+',
                                'i');
            var res = re.test(output.value);
            if (!res) {
                dump("Expecting " + appName
                     + " from " + appPath
                     + ", got " + output.value + "\n");
            }
            return res;
        },
        
        mysql_bindir : null,
        mysql_bindir_prefname : "mysql.bin.dir",        
        getMysql_bindir : function() {
            if (!this.mysql_bindir) {
                var global_prefset = Components.classes["@activestate.com/koPrefService;1"].getService().prefs;
                if (!global_prefset.hasStringPref(this.mysql_bindir_prefname)) {
                    global_prefset.setStringPref(this.mysql_bindir_prefname, '');
                } else {
                    this.mysql_bindir = global_prefset.getStringPref(this.mysql_bindir_prefname);
                }
            }
            return this.mysql_bindir;
        },
        setMysql_bindir : function(dirname) {
            if (this.mysql_bindir != dirname) {
                var global_prefset = Components.classes["@activestate.com/koPrefService;1"].getService().prefs;
                global_prefset.setStringPref(this.mysql_bindir_prefname, this.mysql_bindir = dirname);
            }
        }, 
        
        getExecutablePath : function(appName) {
            var appPath = Components.classes["@activestate.com/koSysUtils;1"].
                getService(Components.interfaces.koISysUtils).Which(appName);
            if (!appPath) {
                var mysql_bindir = this.getMysql_bindir();
                var appNameExe = appName;
                if (Components.classes['@activestate.com/koInfoService;1'].
                        getService(Components.interfaces.koIInfoService).platform.substring(0, 3) == "win") {
                    appNameExe += ".exe";
                }
                var defaultFilename;
                var os = Components.classes["@activestate.com/koOs;1"].getService();
                var ospath = os.path;
                if (mysql_bindir) {
                    defaultFilename = ospath.join(mysql_bindir, appNameExe);
                    if (ospath.exists(defaultFilename)) {
                        return defaultFilename;
                    }
                } else {
                    defaultFilename = appNameExe;
                }
                appPath = ko.filepicker.openExeFile(null, defaultFilename,
                                                       "Location of " + appName);
                if (!appPath) {
                    throw new Error("You cancelled.");
                }
                var newMysqlDir;
                if ((newMysqlDir = ospath.dirname(appPath)) != mysql_bindir) {
                    dump("Updating mysql bindir to " + newMysqlDir + "\n");
                    this.setMysql_bindir(newMysqlDir);
                }
            }
            return appPath;
        },
        
        mysqlAdminFinder : function() {
            if (this.mysqladminPath) {
                if (this.validateVersion(this.mysqladminPath, 'mysqladmin')) {
                    return this.mysqladminPath;
                } else {
                    dump("bad mysqladmin of [" + this.mysqladminPath + "]: &lt;" + output.value + "&gt;\n");
                    this.mysqladminPath = null;
                }
            }
            return this.mysqladminPath = this.getExecutablePath("mysqladmin");
        },
        
        mysqlDumpFinder : function() {
            var mysqldump = null;
            if (this.mysqldumpPath) {
                mysqldump = this.mysqldumpPath;
                dump("this.mysqldumpPath is set\n");
            } else if (this.mysqladminPath &amp;&amp;
                       /^(.*)[\/\\]mysqladmin/.test(this.mysqladminPath)) {
                    mysqldump = RegExp.$1;
                    dump("this.mysqldumpPath passes\n");
            }
            if (mysqldump &amp;&amp; this.validateVersion(mysqldump, 'mysqldump')) {
                return this.mysqldumpPath = mysqldump;
            } else {
                return this.mysqldumpPath = this.getExecutablePath("mysqldump");
            }
        },
        
        db_adapters : {},
        db_adapter_handlers : null,
        db_adapter_commands : {
            mysql : {
                'create' : "-u %(username) --password=%(password) %?(socket)  create %(database)",
                'delete' : "-u %(username) --password=%(password) %?(socket) --force drop %(database)"
            },
            __END__ : null
        },
        // This function does the following:
        // 1. Get the root name of the database from the yaml file
        // 2. Get the username and password from the yaml file
        // 3. Verify we know how to handle the specified adapter        
        // 4. Build or delete the databases
        
        // @param {Object} "editor"-- the top-level object macros execute in
        // @param {String} "displayOperation"-- one of 'create' or 'delete'
        // @param {String} "displayOperationGerund"-- one of 'creation' or 'deletion'
        manageDatabases : function(editor, displayOperation, displayOperationGerund) {
            try {
                var config = this.parseConfig();
            } catch(ex) {
                alert(ex + "\n");
                return;
            }
            var self = this;
            if (!this.db_adapter_handlers) {
                this.db_adapter_handlers = {};
                this.db_adapter_handlers.mysql = this.mysqlAdminFinder;
                // put other handlers here.
            }
            var cmds = [];
            for (var type in {'development':null, 'test':null, 'production':null}) {
                var thisConfig = config[type];
                var dbname = thisConfig.database;
                if (!dbname) {
                    as_rails_macros.append_terminal_output("No database specified for type " + type);
                    continue;
                }
                var host = thisConfig['host'];
                if (host &amp;&amp; host != 'localhost') {
                    as_rails_macros.append_terminal_output("Sorry, you'll have to manually "
                          + displayOperation
                          + " database " + dbname + ".  "
                          + "Only local databases are supported in automatic database manipulation");
                    continue;
                }		
                var adapter = thisConfig['adapter'];
                if (!(adapter in this.db_adapters)) {
                    if (adapter.toLowerCase() in this.db_adapter_handlers) {
                        this.db_adapters[adapter] = this.db_adapter_handlers[adapter.toLowerCase()].apply(this);
                    } else {
                        this.db_adapters[adapter] = null;
                    }
                }
                if (!this.db_adapters[adapter]) {
                    as_rails_macros.append_terminal_output("Sorry, you'll have to manually " + displayOperation
                          + " database " + dbname + ".  " +
                          "Komodo Rails projects do not yet support automatic database manipulation for " +
                          adapter + " databases.");
                    continue;
                }
                var rawCommand = this.db_adapter_commands[adapter][displayOperation];
                var finishedCommand = this.quote_if_needed(this.db_adapters[adapter]) + " ";
                while (rawCommand.length &gt; 0) {
                    if (/^%\((.*?)\)(.*)/.test(rawCommand)) {
                        var arg = thisConfig[RegExp.$1];
                        finishedCommand += this.quote_if_needed(arg);
                        rawCommand = RegExp.$2;
                    } else if (/^%\?\((.*?)\)(.*)/.test(rawCommand)) {
                        // like expand %(socket) to either --socket=arg[socket], or ignore
                        var arg = RegExp.$1;
                        if (thisConfig[arg]) {
                            finishedCommand += ("--" + arg + "=" +
                                                this.quote_if_needed(thisConfig[arg]));
                        }
                        rawCommand = RegExp.$2;
                    } else {
                        var x = rawCommand.indexOf('%');
                        if (x &gt; -1) {
                            finishedCommand += rawCommand.substr(0, x);
                            rawCommand = rawCommand.substr(x);
                        } else {
                            finishedCommand += rawCommand.substr(0, 1);
                            rawCommand = rawCommand.substr(1);
                        }
                    }
                }
                cmds.push(finishedCommand);
            }
            if (cmds.length &gt; 0) {
                (new this.CmdSequenceRunner(editor, cmds,
                    "Database " + displayOperationGerund + " done")).runner();
            }
        },
        
        _check_opt : function(options, arg, default_val) {
            return typeof(options[arg]) == "undefined" ? default_val : options[arg];
        },
        
        runCommand : function(editor, cmd, options, terminationCallback) {
            // Check for undefined commands
            ko.run.runCommand(editor, cmd,
                              this._check_opt(options, 'dir', null),
                              this._check_opt(options, 'env', ''),
                              this._check_opt(options, 'insertOutput', false),
                              this._check_opt(options, 'operateOnSelection', false),
                              this._check_opt(options, 'doNotOpenOutputWindow', false),
                              this._check_opt(options, 'runIn', "command-output-window"),
                              this._check_opt(options, 'parseOutput', false),
                              this._check_opt(options, 'parseRegex', ''),
                              this._check_opt(options, 'showParsedOutputList', false),
                              this._check_opt(options, 'name', null),
                              this._check_opt(options, 'clearOutputWindow', true),
                              terminationCallback);
        },

        // return an array of environment strings
        fixUserEnvPath : function fixUserEnvPath(targetPath) {
            var userEnvSvc = Components.classes["@activestate.com/koUserEnviron;1"].getService(Components.interfaces.koIUserEnviron);
            var countHolder = {};
            var envStrings = userEnvSvc.GetEnvironmentStrings(countHolder);
            var osSvc = Components.classes["@activestate.com/koOs;1"].getService(Components.interfaces.koIOs);
            var pathsep = osSvc.pathsep;
            for (var i = 0; i &lt; envStrings.length; i++) {
                var env = envStrings[i];
                var parts = env.split('=', 2);
                if (parts[0].toLowerCase() == "path") {
                    var pathdirs = parts[1].split(pathsep);
                    if (pathdirs[0] != targetPath) {
                        pathdirs.unshift(targetPath);
                        return (parts[0] + '=' + pathdirs.join(pathsep));
                    }
                    break;
                }
            }
            return null;
        },
        
        get_path_by_ko_pref : function get_path_by_ko_pref(appName) {
            var path = null;
            try {
                path = komodo.interpolate("%(" + appName + ")");
            } catch(ex) {
                dump("get_path_possibly_quoted: " + ex + "\n");
            }
            return path;
        },
        
        quote_if_needed : function quote_if_needed(s) {
            var s1;
            if (/[^\w.:\-\"\'\\\/]/.test(s)) {
                s1 = '"' + s + '"';
            } else {
                s1 = s;
            }
            return s1;
        },
        
        get_path_possibly_quoted : function get_path_possibly_quoted(appName) {
            var path = this.get_path_by_ko_pref(appName);
            if (path) {
                path = this.quote_if_needed(path);
            }
            return path;
        },
        
        generateRailsObject : function generateRailsObject(editor,
                                                           extensions,
                                                           railsTypeName,
                                                           part_names) {
            var name;
            var project = (Components.classes["@activestate.com/koPartService;1"].getService().
                           runningMacro.project);
            if (part_names) {
                var name_list;
                if (part_names.length == 2) {
                    name_list = dialog_prompt2(as_rails_macros.capitalize(railsTypeName) + " values",
                                               part_names[0] + ":", "", part_names[1] + ":", "",
                                               "Please enter values for the " + railsTypeName,
                                               "rails:" + part_names[0], "rails:" + part_names[1]);
                    if (!name_list) return;
                } else {
                    name_list = [];
                    for (var i = 0; i &lt; part_names.length; i++) {
                        var part_name = part_names[i];
                        var n = dialog_prompt(as_rails_macros.capitalize(railsTypeName) + " " + part_name + " name",
                                         railsTypeName + "/" + part_name, "",
                                         "Please enter a name for the " + part_name,
                                          "rails:" + part_name);
                        if (!n) return;
                        name_list.push(n);
                    }
                }
                name = name_list.join(" ");
            } else {
                name = dialog_prompt(as_rails_macros.capitalize(railsTypeName) + " name",
                                     railsTypeName, "",
                                     "Please enter a name for a " + railsTypeName);
            }
            if (!name) {
                return;
            }
            var projectDirURL = project.url.substring(0, project.url.lastIndexOf("/"));
            var terminationCallback = function(retval) {
                try {
                    var termscin = document.getElementById("runoutput-scintilla").scimoz;
                    var text = termscin.text;
                    var textLines = text.split(/\r?\n/);
                    for (var i = 0; i &lt; textLines.length; i++) {
                        try {
                            var a = textLines[i].split(/\s+/);
                            if (a[0].length == 0) a.shift();
                            if (a[1] &amp;&amp; a[1].indexOf(".") != -1) {
                                var doit = (!extensions);
                                if (!doit) {
                                    for (var ext in extensions) {
                                        if (a[1].lastIndexOf(ext) == a[1].length - ext.length) {
                                            doit = true;
                                            break;
                                        }
                                    }
                                }
                                if (doit) {
                                    var fname = project.getFile().dirName + "/" + a[1];
                                    fname = projectDirURL + "/" + a[1];
                                    ko.open.URI(fname);
                                }
                            }
                        } catch(ex) { dump(textLines[i] + ": " + ex + "\n"); }
                    }
                } catch(ex) { dump(ex + "\n"); }
            };
            var rawRubyPath = this.get_path_by_ko_pref('ruby');
            if (!rawRubyPath) {
                throw new Error("No Komodo pref for Ruby was found");
            }
            var rubyPath = this.quote_if_needed(rawRubyPath);
            var cmd = (rubyPath + ' script/generate ' + railsTypeName + ' ' + name + ' --skip');
            var options = {
                dir: project.getFile().dirName,
                env: this.fixUserEnvPath(rawRubyPath),
                __END__ : null
            };
            as_rails_macros.runCommand(editor, cmd, options, terminationCallback);
        },

        installPlugin : function installPlugin(editor, project,
                                               plugin, terminationCallback) {
            if (typeof(terminationCallback) == "undefined") terminationCallback = null;
            var rawRubyPath = this.get_path_by_ko_pref('ruby');
            if (!rawRubyPath) {
                throw new Error("No Komodo pref for Ruby was found");
            }
            var rubyPath = this.quote_if_needed(rawRubyPath);
            var cmd = (rubyPath + ' script/plugin install ' + plugin);
            var options = {
                dir: project.getFile().dirName,
                env: this.fixUserEnvPath(rawRubyPath),
                __END__ : null
            };
            as_rails_macros.runCommand(editor, cmd, options, terminationCallback);
        },

        setup_associated_paths_env : function setup_associated_paths_env(obj) {
            var rawRubyPath = this.get_path_by_ko_pref('ruby');
            if (!rawRubyPath) {
                throw new Error("No Komodo pref for Ruby was found");
            }
            var osPathSvc = Components.classes["@activestate.com/koOsPath;1"].getService(Components.interfaces.koIOsPath);
            var rootDir = osPathSvc.dirname(rawRubyPath);
            if ('base' in obj) {
                obj[obj.base] = this.quote_if_needed(osPathSvc.join(rootDir, obj.base));
            }
            obj.ruby = this.quote_if_needed(rawRubyPath);
            obj.env = this.fixUserEnvPath(rawRubyPath);
        },
        
        launchRubyAppInConsole : function launchRubyAppInConsole(editor, project, cmd_args_str) {
            var rawRubyPath = this.get_path_by_ko_pref('ruby');
            if (!rawRubyPath) {
                throw new Error("No Komodo pref for Ruby was found");
            }
            var options = { runIn: "new-console",
                            dir: project.getFile().dirName,
                            env: this.fixUserEnvPath(rawRubyPath),
                            __END__ : null
            };
            var rubyPath = this.quote_if_needed(rawRubyPath);
            var cmd = rubyPath + '  ' + cmd_args_str;
            as_rails_macros.runCommand(editor, cmd, options);
        },
        
        mysqladminPath : null,
        
        getConfig : function() {
            var project = (Components.classes["@activestate.com/koPartService;1"].getService().
                           runningMacro.project);
            var os = Components.classes["@activestate.com/koOs;1"].getService();
            var ospath = os.path;
            var parts = [project.getFile().dirName, 'config', 'database.yml'];
            var configPath = ospath.joinlist(parts.length, parts);
            if (!ospath.exists(configPath)) {
                throw new Error("Can't find file " + configPath);
            }
            var contents = os.readfile(configPath);
            return contents;
        },
        
        parseConfig : function(configText) {
            function mergeConfigs(curr_hash, template_hash) {
                for (var p in template_hash) {
                    curr_hash[p] = template_hash[p];
                }
            }
            if (!configText) {
                configText = this.getConfig();
            }
            var lines = configText.split(/\r?\n/);
            var hash = {development:{}, test:{}, production:{}};
            var curr_hash = null;
            var aliases = {};
            for (var i = 0; i &lt; lines.length; i++) {
                var line = lines[i];
                if (/^(\w+)s*:\s+\&amp;(\w+)/.test(line)) {
                    var anchor_name = RegExp.$2;
                    if (!aliases[anchor_name]) {
                        aliases[anchor_name] = {}
                    }
                    curr_hash = aliases[anchor_name];
                } else if (/&lt;&lt;\s*:\s*\*(\w+)/.test(line)) {
                    var anchor = RegExp.$1;
                    if (!aliases[anchor]) {
                        dump("rails_init: parseConfig: Anchor " + anchor + " not recognized\n");
                    } else {
                        mergeConfigs(curr_hash, aliases[anchor]);
                    }
                } else if (/^(development|test|production):/.test(line)) {
                    curr_hash = hash[RegExp.$1];
                } else if (/^\s+(\w+)s*:\s*(.*?)\s*$/.test(line)) {
                    curr_hash[RegExp.$1] = RegExp.$2;
                }
            }
            return hash;
        },
        
        configSupported : function configSupported(config, requirements) {
            for (var i in requirements) {
                var opt = requirements[i];
                var field = opt[0];
                if (config[field] &amp;&amp; config[field] != opt[1]) {
                    return opt[2];
                }
            }
            return null;
        },
        
        // put helper functions here
        
        capitalize : function capitalize(s) {
            if (s.length == 0) return s;
            else if (s.length == 1) return s.toUpperCase()
            else return s[0].toUpperCase() + s.substr(1);
        },    
        _eol_strs : ["\r\n", "\n", "\r"],
    
        append_terminal_output : function(str) {
            try {
                var scimoz = document.getElementById("runoutput-scintilla").scimoz;
                var currNL = this._eol_strs[scimoz.eOLMode];
                var full_str = (scimoz.getColumn(scimoz.length) == 0) ? "" : currNL;
                full_str += "*************************************" + currNL + str + currNL;
                var full_str_byte_length = ko.stringutils.bytelength(full_str);
                var ro = scimoz.readOnly;
                try {
                    scimoz.readOnly = false;
                    scimoz.appendText(full_str_byte_length, full_str);
                } finally {
                    scimoz.readOnly = ro;
                }
            } catch(ex) {
                // dump(ex + "\n");
                // We failed to write str to the output-window, so alert it.
                alert(str);
            }
        },
        
        __end__ : null
    };
            
    // other items are constants in effect
    as_rails_macros.CmdSequenceRunner.prototype.terminationCallback = function() {
        try {
        this.clearOutputWindow = false;
        this.cmds.shift();
        if (this.cmds.length &gt; 0) {
            this.options.clearOutputWindow = false;
            this.runner();
        } else if (this.end_note) {
            as_rails_macros.append_terminal_output(this.end_note);
        }
        }catch(ex)  { alert(ex + "\n"); }
    };
    as_rails_macros.CmdSequenceRunner.prototype.runner = function() {
        var self = this;
        var tcb = function() {
            self.terminationCallback();
        }
        as_rails_macros.runCommand(this.editor, this.cmds[0], this.options, tcb);
    }
    
} else {
    // dump("as_rails_macros already exists, type = " + typeof(as_rails_macros) + "\n");
}</macro>
<macro async="0" icon="chrome://famfamfamsilk/skin/icons/bug_go.png" id="781c51d2-3d2b-f449-90bf-a6c187c03129" idref="0617cf91-d2e9-724f-a8a8-751a809ee81d" keyboard_shortcut="" language="JavaScript" name="debug rails app" rank="100" trigger="trigger_postopen" trigger_enabled="0">
(function() {
    function launchDebugger(editor, project, host, port, rbpath) {
        var obj = {ruby: null, env:null};
        as_rails_macros.setup_associated_paths_env(obj);
        var rdbenv = 'RUBYDB_OPTS=remoteport=' + host + ":" + port;
        if (obj.env) {
            obj.env += "\n" + rdbenv;
        } else {
            obj.env = rdbenv;
        }
        var options = { runIn: "new-console",
                        dir: project.getFile().dirName,
                        env : obj.env,
                        __END__ : null
        };
        var cmd = (obj.ruby + ' -I "'
                   + rbpath
                   + '" -r rdbgp.rb script/server webrick');
        as_rails_macros.runCommand(editor, cmd, options);
    }
    try {
        if (!gDBG_Listener) {
            var productTypePrintable;
            try {
                productTypePrintable = ("the " + Components.
                            classes["@activestate.com/koInfoService;1"].
                            getService(Components.interfaces.koIInfoService).
                            productType);
            } catch(ex) {
                productTypePrintable = "this";
            }
            var message = ("Debugging is not supported in "
                            + productTypePrintable
                            + " edition of Komodo");
            throw new Error(message);
        }
        var os = Components.classes["@activestate.com/koOs;1"].getService();
        var ospath = os.path;
        var dirSvc = Components.classes["@activestate.com/koDirs;1"].getService();
        var items = [dirSvc.supportDir, "dbgp", "rubylib"];
        var rbpath = ospath.joinlist(items.length, items).replace(/\\/g, '/');
        var host = 'localhost';
        if (!gDBG_Listener.isListening()) {
            gDBG_Controller.do_cmd_debuggerListener();
            if (!gDBG_Listener.isListening()) {
                ko.dialogs.alert("Please choose a different port, and retry this command");
                prefs_doGlobalPrefs('debuggerConnection');
                return;
            }
        }
        var port = gDBG_Listener.manager.port;
        var project = (Components.classes["@activestate.com/koPartService;1"].getService().
                       runningMacro.project);
        launchDebugger(this, project, host, port, rbpath);
    } catch(ex) {
        alert(ex + "\n");
    }
})();</macro>
<macro async="0" icon="chrome://famfamfamsilk/skin/icons/application_osx_terminal.png" id="9af55290-da1d-f640-b489-afeb1afa80e6" idref="0617cf91-d2e9-724f-a8a8-751a809ee81d" keyboard_shortcut="" language="JavaScript" name="rails console" rank="100" trigger="trigger_postopen" trigger_enabled="0">
(function() {
    try {
        var project = (Components.classes["@activestate.com/koPartService;1"].getService().
                        runningMacro.project);
        var rawRubyPath = as_rails_macros.get_path_by_ko_pref('ruby');
        var osPathSvc =
    Components.classes["@activestate.com/koOsPath;1"].getService(Components.interfaces.koIOsPath);
        var rubyDir = osPathSvc.dirname(rawRubyPath);
        var irbPath = osPathSvc.join(rubyDir, 'irb');
        if (!osPathSvc.exists(irbPath)) {
            irbPath = null;
            var candidates = {"irb.sh" : 1, "irb.bat" : 1, "irb.cmd" : 1 };
            var resultObj = {};
            var filenames = (Components.classes["@activestate.com/koOs;1"].
                     getService(Components.interfaces.koIOs).listdir(rubyDir, resultObj));
            for (var idx in filenames)  {
                var fname = filenames[idx];
                if (fname in candidates)  {
                    irbPath = osPathSvc.join(rubyDir, fname);
                    break;
                }
            }
            if (!irbPath) {
                alert(("Sorry, can't find a version of irb in the directory " + rubyDir
                       + ".  Please check the path to Ruby in the preferences section."));
                prefs_doGlobalPrefs('rubyItem');
                return;
            }
        }
        if (/[^\w.:\-\"\'\\\/]/.test(irbPath)) {
            irbPath = '"' + irbPath + '"';
        }
        var cmd = 'script/console --irb=' + irbPath;
        as_rails_macros.launchRubyAppInConsole(this, project, cmd);
   } catch(ex) {
       alert(ex + "\n");
   }
})();</macro>
<macro async="0" icon="chrome://famfamfamsilk/skin/icons/application_go.png" id="bab66359-fa47-f44a-b602-30a031340e29" idref="0617cf91-d2e9-724f-a8a8-751a809ee81d" keyboard_shortcut="" language="JavaScript" name="run server" rank="100" trigger="trigger_postopen" trigger_enabled="0">
(function() {
    try {
        var project = (Components.classes["@activestate.com/koPartService;1"].getService().
                        runningMacro.project);
        as_rails_macros.launchRubyAppInConsole(this, project, 'script/server');
    } catch(ex) {
        alert(ex + "\n");
    }
})();</macro>
<macro async="0" icon="chrome://famfamfamsilk/skin/icons/database_edit.png" id="2c4bc035-092f-e244-8487-cec24ca1bd25" idref="07fecccb-7e66-5c4f-b2be-4225a4b4d6a1" keyboard_shortcut="" language="JavaScript" name="migration" rank="100" trigger="trigger_postopen" trigger_enabled="0">
try {
    as_rails_macros.generateRailsObject(this,
                                        null, // extensions
                                        'migration');
} catch(ex) {
    alert(ex + "\n");
}</macro>
<macro async="0" icon="chrome://famfamfamsilk/skin/icons/script.png" id="7bc66b5a-4fac-8f45-8604-232fc1cc3365" idref="07fecccb-7e66-5c4f-b2be-4225a4b4d6a1" keyboard_shortcut="" language="JavaScript" name="controller" rank="100" trigger="trigger_postopen" trigger_enabled="0">
try {
    as_rails_macros.generateRailsObject(this,
                                        {'.rb':null}, // extensions
                                        'controller');
} catch(ex) {
    alert(ex + "\n");
}
</macro>
<macro async="0" icon="chrome://famfamfamsilk/skin/icons/script_lightning.png" id="a01c2e6d-b6cb-8a49-93df-a1b4cb7cdd19" idref="07fecccb-7e66-5c4f-b2be-4225a4b4d6a1" keyboard_shortcut="" language="JavaScript" name="scaffold" rank="100" trigger="trigger_postopen" trigger_enabled="0">
try {
    as_rails_macros.generateRailsObject(this,
                                        {'.rb':null, '.rhtml':null, '.html.erb':null}, // extensions
                                        'scaffold',
                                        ['model', 'controller']);
} catch(ex) {
    alert(ex + "\n");
}
</macro>
<macro async="0" icon="chrome://famfamfamsilk/skin/icons/script_edit.png" id="aa4facb7-5261-5e40-b880-898d74d1e251" idref="07fecccb-7e66-5c4f-b2be-4225a4b4d6a1" keyboard_shortcut="" language="JavaScript" name="controller-method" rank="100" trigger="trigger_postopen" trigger_enabled="0">
try {
    as_rails_macros.generateRailsObject(this,
                                        {'.rb':null, '.rhtml':null}, // extensions
                                        'controller',
                                        ['controller', 'method']);
} catch(ex) {
    alert(ex + "\n");
}
</macro>
<macro async="0" icon="chrome://famfamfamsilk/skin/icons/database_add.png" id="d532dd19-7a06-f24a-ab5f-74a8dfe1c3b3" idref="07fecccb-7e66-5c4f-b2be-4225a4b4d6a1" keyboard_shortcut="" language="JavaScript" name="model" rank="100" trigger="trigger_postopen" trigger_enabled="0">
try {
    as_rails_macros.generateRailsObject(this,
                                        {'.rb':null}, // extensions
                                        'model');
} catch(ex) {
    alert(ex + "\n");
}</macro>
<macro async="0" icon="chrome://famfamfamsilk/skin/icons/plugin.png" id="9bf6f9df-011e-9545-9ffc-8d9c6d4f10f3" idref="1ee13b8a-5232-294d-b385-f865543841ef" keyboard_shortcut="" language="JavaScript" name="autocomplete" rank="100" trigger="trigger_postopen" trigger_enabled="0">
try {
    var project = (Components.classes["@activestate.com/koPartService;1"].getService().
                       runningMacro.project);
    as_rails_macros.installPlugin(this, project,
                                  'http://svn.rubyonrails.org/rails/plugins/auto_complete');
} catch(ex) {
    alert(ex + "\n");
}
</macro>
<macro async="0" icon="chrome://famfamfamsilk/skin/icons/plugin.png" id="a8b8f954-f473-0742-82b3-0e25c72adb97" idref="1ee13b8a-5232-294d-b385-f865543841ef" keyboard_shortcut="" language="JavaScript" name="in-place-editor" rank="100" trigger="trigger_postopen" trigger_enabled="0">
try {
    var project = (Components.classes["@activestate.com/koPartService;1"].getService().
                       runningMacro.project);
    as_rails_macros.installPlugin(this, project,
                                  'http://svn.rubyonrails.org/rails/plugins/in_place_editing/');
} catch(ex) {
    alert(ex + "\n");
}
</macro>
<macro async="0" icon="chrome://famfamfamsilk/skin/icons/plugin.png" id="ea5db107-ac74-d341-bca9-192f3a517946" idref="1ee13b8a-5232-294d-b385-f865543841ef" keyboard_shortcut="" language="JavaScript" name="will_paginate" rank="100" trigger="trigger_postopen" trigger_enabled="0">
try {
    var project = (Components.classes["@activestate.com/koPartService;1"].getService().
                       runningMacro.project);
    as_rails_macros.installPlugin(this, project,
                                  'svn://errtheblog.com/svn/plugins/will_paginate');
} catch(ex) {
    alert(ex + "\n");
}
</macro>
<macro async="0" id="4b020a28-246a-c241-8d10-3c254806427f" idref="3a922322-c4d8-3f4c-b698-04ade07aa7f5" keyboard_shortcut="" language="JavaScript" name="oncreate" rank="100" trigger="trigger_postopen" trigger_enabled="0">
// Protect the namespace

(function() {
    var os = Components.classes["@activestate.com/koOs;1"].getService();
    var ospath = os.path;
    
    function removeThisMacro(project, macro_name) {
        var projectManager = ko.projects.manager;
        projectManager.currentProject = project;
        // delete the creation macro
        var macro = project.getChildWithTypeAndStringAttribute('macro', 'name', macro_name, 1);
        if (macro) {
            // ko.projects.manager.removeItem(macro, true);
            macro.parent.removeChild(macro);
            projectManager.viewMgr.view.refresh(project);
        } else {
            dialog_alert("couldn't find the oncreate macro in " +
                         project.name);
        }
    }
    
    function executableExists(osPathSvc, path) {
        if (osPathSvc.exists(path)) {
            return true;
        }
        if (Components.classes['@activestate.com/koInfoService;1'].
            getService(Components.interfaces.koIInfoService).platform.substring(0, 3) == "win") {
            for (var suffix in {cmd:null, bat:null, exe:null, com:null}) {
                if (osPathSvc.exists(path + "." + suffix)) {
                    return true;
                }
            }
        }
        return false;
    }       
        
    // This function does lots of checking to help make the initial experience
    // as smooth as possible.
    function getRailsExecutable() {
        var msgs = {};
        // Is there a Ruby?
        var osPathSvc = Components.classes["@activestate.com/koOsPath;1"].getService(Components.interfaces.koIOsPath);
        var rubyPath = komodo.interpolate("%(ruby)");
        if (!rubyPath) {
            msgs.prompt = "Komodo couldn't find any Ruby executable.";
            msgs.title = "Ruby not found.";
        }
        // Is the thing called Ruby most likely Ruby, and not some renamed program?
        var rubyDir;
        var output = null;
        if (rubyPath) {
            rubyDir = osPathSvc.dirname(rubyPath);
            if (/[^\w.:\-\"\'\\\/]/.test(rubyPath)) {
                rubyPath = '"' + rubyPath + '"';
            }
            var runSvc = Components.classes["@activestate.com/koRunService;1"].getService();
            output = {};
            var error = {};                
            runSvc.RunAndCaptureOutput(rubyPath + ' --version',
                                       '', '', '',
                                       output, error);
            output = output.value;
            if (!output) {
                msgs.prompt = ("Running `" + rubyPath + " -e \"puts RUBY_VERSION\"' failed to work.");
                msgs.title = "Unexpected result from running the current selected ruby.";
            }
            //dump("output = " + output + "\n");
        }
        // Is the Ruby recent enough?
        if (!msgs.prompt) {
            if (!/^ruby\s+([\d\.]+)/.test(output)) {
                msgs.prompt = ("Running `" + rubyPath + " --version' gave unexpected output of " + output + ".");
                msgs.title = "Unexpected result from running the current selected ruby.";
            } else {
                var items = RegExp.$1.split(".");
                if (items.length &lt; 3) {
                    if (items.length &lt; 2) {
                        items[1] = 0;
                    }
                    items[2] = 0;
                }
                var verNum = 100 * ((100 * parseInt(items[0])) + parseInt(items[1])) + parseInt(items[2]);
                if (verNum &lt;= 10803) { // 1.8.3 =&gt; 100 * ((100 * 1) + 8) + 3;                
                    msgs.prompt = ("Komodo needs to work with at least version "
                                   + "1.8.4 of Ruby, but is currently pointing at version "
                                   + output);
                    msgs.title = "Ruby version " + output + " isn't supported by Komodo.";
                }
            }
        }
        // Is there a Rails installed with that Ruby?
        if (!msgs.prompt) {
            var railsPath = osPathSvc.join(rubyDir, "rails");
            if (executableExists(osPathSvc, railsPath)) {
                // Everything should work.
                return railsPath;
            }              
            msgs.prompt = ("Komodo is currently using the Ruby installation at "
                      + rubyDir
                      + ", but Rails isn't installed there.");
            msgs.title =  "Rails not found in the currently selected Ruby configuration.";
        }
        var dialogAction = ko.dialogs.customButtons(msgs.prompt,
                                                    ['OK', 'Help', 'Preferences'], // buttons
                                                    null, // default response (OK)
                                                    null, // text -- inner selectable box
                                                    msgs.title);
        if (dialogAction == 'Preferences') {
            prefs_doGlobalPrefs('rubyItem');
        } else if (dialogAction == 'Help') {
            ko.help.open('rails_tutorial');
        }
        return null;
    }
    
    function runRailsCommand() {
        var runningMacro = Components.classes["@activestate.com/koPartService;1"].
                           getService().runningMacro;
        var project = runningMacro.project;
        var projectURI = project.url;
        var projectFileEx = project.getFile();
        // Get the project's location, then from one point higher populate it.
        var projectPath = projectFileEx.path;
        var projectDirPath = projectFileEx.dirName;
        var railsDirName = ospath.basename(projectDirPath);
        var databaseYamlPath = ospath.joinlist(3, [projectDirPath, "config", "database.yml"]);
        var ok = true;
        // Always remove the oncreate macro at the end of processing,
        // regardless of which path we take.
        setTimeout(removeThisMacro, 1000, project, 'oncreate');
        // Remove the debugger macro on Komodo Edit
        if (Components.classes['@activestate.com/koInfoService;1'].
                  getService(Components.interfaces.koIInfoService).productType != 'ide') {
            setTimeout(removeThisMacro, 1000, project, 'debug rails app');
        }

        
        if (ospath.exists(databaseYamlPath)) {
            ko.dialogs.alert("Doing a partial install in a non-empty directory",
                             ("The directory " + projectDirPath + " isn't empty, so Komodo won't "
                              + "run `rails " + railsDirName + "' there.  Komodo will create a "
                              + "project containing the Rails tools, which might be enough.  If not, "
                              + "please switch to a command-line and manually run "
                              + "`rails " + railsDirName + "' in the directory "
                              + ospath.dirname(projectDirPath) + "."),
                             "Rails directory not empty");
            ok = false;
        }            
        if (/\W/.test(railsDirName)) {
            ok = ko.dialogs.okCancel("Install here anyway?", "OK",
                                    ("This is not a recommended name for a Rails project. "
                                     + "The final part of a Rails directory project should be a valid identifier. "));
        }
        if (!ok) {
            return;
        }
        var containingDirPath = ospath.dirname(projectDirPath);
        var railsPath = getRailsExecutable();
        if (!railsPath) {
            return;
        }
        // Rails 2 uses sqlite by default, so get the choice of DB from the user
        var db_list = ["sqlite3", "mysql", "postgresql", "oracle", "sqlite2"];
        var database = ko.dialogs.selectFromList(
            "Select a database", // title,
            "Which database do you want to use for this project?", // prompt,
            db_list, // items
            "one"); // selectionCond: exactly one
        if (database == null) {
            // canceled out
            return;
        } else if (!database) {
            database = db_list[0];
        }
        if (/[^\w.:\-\"\'\\\\/]/.test(railsPath)) {
            railsPath = '"' + railsPath + '"';
        }
        var railsProjectName = projectFileEx.baseName;
        var ext = projectFileEx.ext;
        if (ext) {
            railsProjectName = railsProjectName.slice(0, -1 * ext.length);
        }
        
        // Arguments for the commands
    
        var cmd = railsPath + ' "' + railsDirName + '" --skip --database=' + database;
        var dir = containingDirPath;
        var env = '';
        var insertOutput = false;
        var operateOnSelection = false;
        var doNotOpenOutputWindow = false;
        var runIn = "command-output-window";
        var parseOutput = false;
        var parseRegex = '';
        var showParsedOutputList = false;
        var name = null;
        var clearOutputWindow = true;
        var terminationCallback = function() {
            // copied from rails_init.js
            var wrapper = {
                _eol_strs : ["\r\n", "\n", "\r"],
            
                append_terminal_output : function(str) {
                    try {
                        var scimoz = document.getElementById("runoutput-scintilla").scimoz;
                        var currNL = this._eol_strs[scimoz.eOLMode];
                        var full_str = (scimoz.getColumn(scimoz.length) == 0) ? "" : currNL;
                        full_str += "*************************************" + currNL + str + currNL;
                        var full_str_byte_length = ko.stringutils.bytelength(full_str);
                        var ro = scimoz.readOnly;
                        try {
                            scimoz.readOnly = false;
                            scimoz.appendText(full_str_byte_length, full_str);
                        } finally {
                            scimoz.readOnly = ro;
                        }
                    } catch(ex) {
                        alert(str);
                    }
                }
            };
            var runSvc = Components.classes["@activestate.com/koRunService;1"].getService();
            var output = {};
            var error = {};
            var cmd = railsPath + " -v";
            runSvc.RunAndCaptureOutput(cmd, '', '', '', output, error);
            // Fix up the macros based on output.value
            var rails_version;
            if (/^rails\s*([0-9\.]+)\s*$/i.test(output.value)) {
                rails_version = RegExp.$1.split(".");                
            } else {
                rails_version = [2, 0, 0];
            }
            // Apply any needed patches to the base version 1 macros.
            // I use two data-structures because JS doesn't allow arrays as
            // keys on objects
            var ids2Versions = [
                ['i200', [2,0,0]]
            ];
            
            var patch_table = {
                'i200': [
                    ['scaffold', "['model', 'controller']", "['model', 'list of name:type attributes']"],
                ]
            };
            if (Components.classes['@activestate.com/koInfoService;1'].getService(Components.interfaces.koIInfoService).platform
                != 'darwin') {
                patch_table.i200.push(['rails console',
                                         "var cmd = 'script/console --irb=' + irbPath;",
                                         "var cmd = 'script/console';"])
            }
            var my_patches = [];
            var versionInfo;
            // Apply the last set of patches.
            for (var i = 0; i &lt; ids2Versions.length; i++) {
                versionInfo = ids2Versions[i];
                if (rails_version &gt;= versionInfo[1]) {
                    // keep the last one
                    my_patches = patch_table[versionInfo[0]];
                }
            }
            if (my_patches.length) {
                var patch;
                for (var i = 0; i &lt; my_patches.length; i++) {
                    patch = my_patches[i];
                    var macro_name = patch[0];
                    var macro = project.getChildWithTypeAndStringAttribute('macro', 'name', macro_name, 1);
                    if (macro) {
                        var s = macro.value;
                        var needle = patch[1];
                        if (typeof(needle) == "string") {
                            var idx = s.indexOf(needle);
                            if (idx &gt;= 0) {
                                macro.value = s.substring(0, idx) + patch[2] + s.substring(idx + needle.length);
                            }
                        } else if (typeof(needle.test) == "function") {
                            macro.value = s.replace(needle, patch[2]);
                        }
                    }
                }
            }
            // finally run rails_init
            var rails_init = project.getChildWithTypeAndStringAttribute('macro', 'name', 'rails_init', 1);
            if (macro) {
                // Simulate a notification-triggered macro call.
                ko.projects.executeMacro(rails_init, false,
                                         {subject: project,
                                           topic: 'project_added',
                                           data: ''});
            } else {
                dump("Can't find macro rails_init!!\n");
            }
            wrapper.append_terminal_output("The " + railsDirName + " project is built\n");
        };
        ko.run.runCommand(self, cmd, dir, env, insertOutput,
                          operateOnSelection, doNotOpenOutputWindow,
                          runIn, parseOutput, parseRegex, showParsedOutputList,
                          name, clearOutputWindow, terminationCallback);
        // While the command is running, update the test-plan preferences
        // to point at this directory.
        if ('sleuth' in ko &amp;&amp; ko.sleuth) {
            updateTestPlanDirectories(project, projectDirPath);
        }
    }
    function updateTestPlanDirectories(project, projectDirPath) {
        var prefset = project.prefset;
        if (!prefset.hasPrefHere('testPlans')) {
            return;
        }
        var testPlanPrefs = prefset.getPref('testPlans');
        var testPlanNames = {};
        testPlanPrefs.getPrefIds(testPlanNames, {});
        testPlanNames = testPlanNames.value;
        for (var i = 0; i &lt; testPlanNames.length; i++) {
            var testPlanName = testPlanNames[i];
            var testPlanPref = testPlanPrefs.getPref(testPlanName);
            ko.sleuth.manager.setPrefToDir(testPlanPref,
                                           projectDirPath);
        }
    }
    try {
        runRailsCommand();
    } catch(ex) {
        alert(ex + "\n");
    }
})();
</macro>
<folder id="bddcde91-4575-784a-af5f-4e9c2d42e689" idref="3a922322-c4d8-3f4c-b698-04ade07aa7f5" name="Rails Tools">
</folder>
<folder id="5adb02c4-9c14-ac47-b0c8-8f69ea206669" idref="3e01c81c-e179-ac48-9900-35382e2a14be" name="Views">
</folder>
<snippet id="479eaea0-ee44-7f45-83ce-d16818075812" idref="5adb02c4-9c14-ac47-b0c8-8f69ea206669" indent_relative="true" keyboard_shortcut="" name="for-x-in-obj.xs" set_selection="true">
&lt;% for [[%tabstop1:name]] in [[%tabstop:object]].[[%tabstop1]]s %&gt;
  &lt;%= !@#_currentPos!@#_anchor [[%tabstop1]].[[%tabstop:attribute]] %&gt;
&lt;% end %&gt;</snippet>
<snippet id="98adafbe-94a5-7344-a17e-d1d3cbe201ba" idref="5adb02c4-9c14-ac47-b0c8-8f69ea206669" indent_relative="false" keyboard_shortcut="" name="xhtml-transitional" set_selection="true">
&lt;!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
!@#_currentPos!@#_anchor</snippet>
<snippet id="f710e29b-7d37-5d4c-954b-5b12d5049e23" idref="5adb02c4-9c14-ac47-b0c8-8f69ea206669" indent_relative="true" keyboard_shortcut="" name="for x in names" set_selection="true">
&lt;% for [[%tabstop1:name]] in [[%tabstop1]]s %&gt;
  &lt;%= !@#_currentPos!@#_anchor [[%tabstop1]] %&gt;
&lt;% end %&gt;</snippet>
<macro async="0" icon="chrome://famfamfamsilk/skin/icons/sport_tennis.png" id="cfaa0cd4-1c2f-5046-b7d6-23b25cda3681" idref="952ee796-f398-c149-a5b4-3cb915a431c7" keyboard_shortcut="" language="JavaScript" name="Unit Tests" rank="100" trigger="trigger_postopen" trigger_enabled="0">
try {
    var obj = {base: 'rake', ruby: null, rake:null, env:null};
    as_rails_macros.setup_associated_paths_env(obj);
    var options = {
        dir: (Components.classes["@activestate.com/koPartService;1"].getService().
              runningMacro.project.getFile().dirName),
        env: obj.env,
        __END__ : null
    };
    as_rails_macros.runCommand(this, obj.rake + ' test:units', options);
} catch(ex) {
    alert(ex + "\n");
}
</macro>
<macro async="0" icon="chrome://famfamfamsilk/skin/icons/database_lightning.png" id="03913814-9afa-904b-8743-ee26bae4ea79" idref="bd28e2d8-4f31-ad43-ae2c-194581adff5e" keyboard_shortcut="" language="JavaScript" name="db:migrate-to-version" rank="100" trigger="trigger_postopen" trigger_enabled="0">
try {
    var obj = {base: 'rake', ruby: null, rake:null, env:null};
    as_rails_macros.setup_associated_paths_env(obj);
    var options = {
        dir: (Components.classes["@activestate.com/koPartService;1"].getService().
              runningMacro.project.getFile().dirName),
        env: obj.env,
        __END__ : null
    };
    var version = dialog_prompt("migrate to which version (blank=current)? ");
    var cmd = obj.rake + ' db:migrate';
    if (version &amp;&amp; /^\d+$/.test(version)) {
        cmd += " VERSION=" + version;
    }
    as_rails_macros.runCommand(this, cmd, options);
} catch(ex) {
    alert(ex + "\n");
}</macro>
<macro async="0" icon="chrome://famfamfamsilk/skin/icons/database_refresh.png" id="4e43839c-64da-2e41-890b-e971826897ad" idref="bd28e2d8-4f31-ad43-ae2c-194581adff5e" keyboard_shortcut="" language="JavaScript" name="db:migrate" rank="100" trigger="trigger_postopen" trigger_enabled="0">
try {
    var obj = {base: 'rake', ruby:null, rake:null, env:null};
    as_rails_macros.setup_associated_paths_env(obj);
    var options = {
        dir: (Components.classes["@activestate.com/koPartService;1"].getService().
              runningMacro.project.getFile().dirName),
        env: obj.env,
        __END__ : null
    };
    as_rails_macros.runCommand(this, obj.rake + ' db:migrate', options);
} catch(ex) {
    alert(ex + "\n");
}
</macro>
<folder id="01eedc78-6fcd-a843-9b93-6d0f7b7ca528" idref="bddcde91-4575-784a-af5f-4e9c2d42e689" name="~Internal">
</folder>
<folder id="0617cf91-d2e9-724f-a8a8-751a809ee81d" idref="bddcde91-4575-784a-af5f-4e9c2d42e689" name="Run">
</folder>
<folder id="07fecccb-7e66-5c4f-b2be-4225a4b4d6a1" idref="bddcde91-4575-784a-af5f-4e9c2d42e689" name="Generators">
</folder>
<folder id="1ee13b8a-5232-294d-b385-f865543841ef" idref="bddcde91-4575-784a-af5f-4e9c2d42e689" name="Plugins">
</folder>
<folder id="3e01c81c-e179-ac48-9900-35382e2a14be" idref="bddcde91-4575-784a-af5f-4e9c2d42e689" name="Snippets">
</folder>
<folder id="952ee796-f398-c149-a5b4-3cb915a431c7" idref="bddcde91-4575-784a-af5f-4e9c2d42e689" name="Test">
</folder>
<folder id="bd28e2d8-4f31-ad43-ae2c-194581adff5e" idref="bddcde91-4575-784a-af5f-4e9c2d42e689" name="Migrate">
</folder>
<folder id="d4fb2364-b384-7b4a-bb9e-baacaafcb152" idref="bddcde91-4575-784a-af5f-4e9c2d42e689" name="~ Misc">
</folder>
<macro async="0" icon="chrome://famfamfamsilk/skin/icons/database_add.png" id="f00a1aca-e770-ad4e-a40f-40746f26a688" idref="bddcde91-4575-784a-af5f-4e9c2d42e689" keyboard_shortcut="" language="JavaScript" name="Create Databases" rank="100" trigger="trigger_postopen" trigger_enabled="0">
(function() {
    function populateDatabases() {
        as_rails_macros.manageDatabases(this, 'create', 'creation');
    };
    try {
        populateDatabases();
    } catch(ex) {
	if (ex.message == "You cancelled.") {
	    return;
	}
        var msg = ex + "\n";
	if ('stack' in ex) msg += ex.stack + "\n";
        alert(msg);
    }
})();</macro>
<macro async="0" icon="chrome://famfamfamsilk/skin/icons/database_delete.png" id="ff74d90d-84e7-854d-82fc-82eb1d655bb8" idref="bddcde91-4575-784a-af5f-4e9c2d42e689" keyboard_shortcut="" language="JavaScript" name="Delete Databases" rank="100" trigger="trigger_postopen" trigger_enabled="0">
(function() {    
    function deleteDatabases() {
        as_rails_macros.manageDatabases(this, 'delete', 'deletion');
    };
    try {
        deleteDatabases();
    } catch(ex) {
	if (ex.message == "You cancelled.") {
	    return;
	}
        var msg = ex + "\n";
	if ('stack' in ex) msg += ex.stack + "\n";
        alert(msg);
    }
})();</macro>
<macro async="0" icon="chrome://famfamfamsilk/skin/icons/sum.png" id="b7a0e2e3-c7ad-cd42-b8a0-8b01b1f897c2" idref="d4fb2364-b384-7b4a-bb9e-baacaafcb152" keyboard_shortcut="" language="JavaScript" name="Stats" rank="100" trigger="trigger_postopen" trigger_enabled="0">
try {
    var obj = {base: 'rake', ruby: null, rake:null, env:null};
    as_rails_macros.setup_associated_paths_env(obj);
    var options = {
        dir: (Components.classes["@activestate.com/koPartService;1"].getService().
              runningMacro.project.getFile().dirName),
        env: obj.env,
        __END__ : null
    };
    as_rails_macros.runCommand(this, obj.rake + ' stats', options);
} catch(ex) {
    alert(ex + "\n");
}
</macro>
<preference-set idref="3a922322-c4d8-3f4c-b698-04ade07aa7f5">
  <boolean id="import_live">1</boolean>
  <string id="lastTestPlanName_pref">test:plugins</string>
<preference-set id="testPlans">
<preference-set id="test all">
  <string id="command_line">rake test</string>
  <string id="directory">file:///C:/Users/ericp/svn/apps/komodo/src/templates/raw/rails/</string>
  <string id="language">Ruby - Rake tests</string>
</preference-set>
<preference-set id="test:functionals">
  <string id="command_line">rake test:functionals</string>
  <string id="directory">file:///C:/Users/ericp/svn/apps/komodo/src/templates/raw/rails/</string>
  <string id="language">Ruby - Rake tests</string>
</preference-set>
<preference-set id="test:integration">
  <string id="command_line">rake test:integration</string>
  <string id="directory">file:///C:/Users/ericp/svn/apps/komodo/src/templates/raw/rails/</string>
  <string id="language">Ruby - Rake tests</string>
</preference-set>
<preference-set id="test:plugins">
  <string id="command_line">rake test:plugins</string>
  <string id="directory">file:///C:/Users/ericp/svn/apps/komodo/src/templates/raw/rails/</string>
  <string id="language">Ruby - Rake tests</string>
</preference-set>
<preference-set id="test:units">
  <string id="command_line">rake test:units</string>
  <string id="directory">file:///C:/Users/ericp/svn/apps/komodo/src/templates/raw/rails/</string>
  <string id="language">Ruby - Rake tests</string>
</preference-set>
</preference-set>
</preference-set>
</project>
